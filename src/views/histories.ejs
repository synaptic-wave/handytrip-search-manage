<%- contentFor('body') %>
<div class="row">
  <div class="col-12">
    <h2 class="mb-4">검색어 수정 이력</h2>
    <div class="table-responsive">
      <table class="table table-hover">
        <thead>
          <tr>
            <th>ID</th>
            <th>타입</th>
            <th>변경 전</th>
            <th>변경 후</th>
            <th>상태</th>
            <th>생성일</th>
            <th>작업</th>
          </tr>
        </thead>
        <tbody id="historiesTableBody"></tbody>
      </table>
    </div>
    <nav>
      <ul class="pagination justify-content-center" id="pagination"></ul>
    </nav>
  </div>
</div>

<%- contentFor('script') %>
<script>
  let currentPage = 1;
  const limit = 10;

  async function loadHistories(page) {
    try {
      const response = await axios.get(`/api/histories?page=${page}&limit=${limit}`);
      const { histories, total } = response.data;

      const tbody = document.getElementById("historiesTableBody");
      tbody.innerHTML = histories
        .map(
          (history) => `
            <tr>
                <td>${history.id}</td>
                <td>${history.type}</td>
                <td>${history.name_before}</td>
                <td>${history.name_after}</td>
                <td>
                    <span class="badge ${getBadgeClass(history.status)}">
                        ${getStatusText(history.status)}
                    </span>
                </td>
                <td>${new Date(history.created_at).toLocaleString()}</td>
                <td>
                    ${
                      history.status === "pending"
                        ? `
                        <button class="btn btn-sm btn-success" onclick="updateStatus(${history.id}, 'approved')">승인</button>
                        <button class="btn btn-sm btn-danger" onclick="updateStatus(${history.id}, 'rejected')">반려</button>
                    `
                        : ""
                    }
                </td>
            </tr>
        `
        )
        .join("");

      // 페이지네이션 업데이트
      const totalPages = Math.ceil(total / limit);
      const pagination = document.getElementById("pagination");
      pagination.innerHTML = generatePagination(page, totalPages);
    } catch (error) {
      console.error("이력을 불러오는 중 오류가 발생했습니다:", error);
      alert("이력을 불러오는 중 오류가 발생했습니다.");
    }
  }

  function getBadgeClass(status) {
    switch (status) {
      case "pending":
        return "bg-warning";
      case "approved":
        return "bg-success";
      case "rejected":
        return "bg-danger";
      default:
        return "bg-secondary";
    }
  }

  function getStatusText(status) {
    switch (status) {
      case "pending":
        return "대기중";
      case "approved":
        return "승인됨";
      case "rejected":
        return "반려됨";
      default:
        return status;
    }
  }

  function generatePagination(currentPage, totalPages) {
    let html = "";

    // 이전 페이지 버튼
    html += `
        <li class="page-item ${currentPage === 1 ? "disabled" : ""}">
            <a class="page-link" href="#" onclick="changePage(${currentPage - 1})">이전</a>
        </li>
    `;

    // 페이지 번호
    for (let i = 1; i <= totalPages; i++) {
      html += `
            <li class="page-item ${currentPage === i ? "active" : ""}">
                <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
            </li>
        `;
    }

    // 다음 페이지 버튼
    html += `
        <li class="page-item ${currentPage === totalPages ? "disabled" : ""}">
            <a class="page-link" href="#" onclick="changePage(${currentPage + 1})">다음</a>
        </li>
    `;

    return html;
  }

  async function updateStatus(id, status) {
    try {
      await axios.patch(`/api/histories/${id}/status`, { status });
      loadHistories(currentPage);
    } catch (error) {
      console.error("상태 업데이트 중 오류가 발생했습니다:", error);
      alert("상태 업데이트 중 오류가 발생했습니다.");
    }
  }

  function changePage(page) {
    if (page < 1) return;
    currentPage = page;
    loadHistories(page);
  }

  // 초기 로드
  loadHistories(1);
</script>
